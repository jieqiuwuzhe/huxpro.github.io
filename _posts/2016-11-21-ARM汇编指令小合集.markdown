---
layout:     post
title:      "ARM汇编指令小合集"
subtitle:   " \"常用ARM指令及汇编 \""
date:       2016-11-21 07:57:00
author:     "Root"
header-img: "img/post-bg-e2e-ux.jpg"
catalog: true
tags:
    - 单片机
---

> “物是人非，可我依旧穿着嫁衣，在黑夜中寻找你的身影。————寡妇制造者”


**常用ARM指令及汇编包括：**

>ARM处理器寻址方式  
>指令集介绍  
>伪指令  
>ARM汇编程序设计  
>C与汇编混合编程  

### ARM处理器寻址方式

#### 1、寄存器寻址

指令执行时直接取出寄存器的值进行操作：  

		MOV R1, R2		;	R2    ->R1
		SUB R0, R1,R2	;	R1-R2 ->R0  

#### 2、立即寻址

数据包含在指令当中：  

		/*SUBS和SUB的区别：SUB不带进位，SUBS带进位*/
		SUBS R0, R0, #1 ;	R0-1   ->R0
		MOV  R0, #0xff00;	0xff00 ->R0

#### 3、寄存器偏移寻址

ARM特有的寻址方式：  

		MOV  R0, R2, LSL #1 ;	 R2的值左移3位，存入R0，R0=R2*8
		ANDS R1, R1, R2, LSL R3; R2的值左移R3位，然后和R1相与，结果放入R1

偏移寻址可采用的移位操作：

> LSL:逻辑左移，低端空位补0
> LSR:逻辑右移，高端空位补0
> ASR:算术右移，保持符号位不变（源操作数为正数，最高位为0，右移则补0，反之，反之。）
> ROR:循环右移，低端移出位填入高端空出位
> RRX:操作数右移一位，左侧空位由**CPSR（程序状态寄存器）**的C位填充

#### 4、寄存器间接寻址

类似于C指针，地址操作：  

		LDR  R1, [R2]     ;	 R2中的数作为地址，取出此地址中的数据保存在R1中
		SWP  R1, R1, [R2] ;  R2中的数作为地址，取出此地址中的数据与R1的值交换

#### 5、基址寻址

基地址进行一定运算再进行下一步操作： 

		LDR  R2, [R3,#0x0F] ; R3中的数加0x0f作为地址，取出此地址中的数据保存在R2中
		STR  R1, [R2 #-2]   ; R2中的数减2作为地址，把R1的值保存在此地址位置

#### 6、多寄存器寻址

一次可以传送多个寄存器的值：  

		LDMIA  R1!, {R2-R7，R12} ; 将R1指向的地址的数据读出到R2-R7,R12，R1自动更新
		STMIA  R0!, {R3-R6，R10} ; 将R3-R6,R10中的数值保存到R0指向的地址，R0自动更新

#### 7、堆栈寻址

堆栈寻址使用专门寄存器（堆栈指针SP），指向一块存储区域——堆栈，堆栈可以分为两种：向高地址生长的称为**递增堆栈**，向低地址生长的称为**递减堆栈**。有以下四种情况：

> 1、满递增；堆栈通过增大存储器地址向上增长
> 2、
> 
> 

		LDMIA  R1!, {R2-R7，R12} ; 将R1指向的地址的数据读出到R2-R7,R12，R1自动更新
		STMIA  R0!, {R3-R6，R10} ; 将R3-R6,R10中的数值保存到R0指向的地址，R0自动更新





—— Root 于 2016.11


