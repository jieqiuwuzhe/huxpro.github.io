---
layout:     post
title:      "ARM汇编指令小合集"
subtitle:   " \"常用ARM指令及汇编 \""
date:       2016-11-21 07:57:00
author:     "Root"
header-img: "img/post-bg-e2e-ux.jpg"
catalog: true
tags:
    - 单片机
---

> “物是人非，可我依旧穿着嫁衣，在黑夜中寻找你的身影。————寡妇制造者”


**常用ARM指令及汇编包括：**

>ARM处理器寻址方式  
>指令集介绍  
>伪指令  
>ARM汇编程序设计  
>C与汇编混合编程  

### ARM处理器寻址方式

#### 1、寄存器寻址

指令执行时直接取出寄存器的值进行操作：  

		MOV R1, R2      ;	R2    ->R1
		SUB R0, R1,R2   ;   R1-R2 ->R0  

#### 2、立即寻址

数据包含在指令当中：  

		/*SUBS和SUB的区别：SUB不带进位，SUBS带进位*/
		SUBS R0, R0, #1 ;	R0-1   ->R0
		MOV  R0, #0xff00;	0xff00 ->R0

#### 3、寄存器偏移寻址

ARM特有的寻址方式：  

		MOV  R0, R2, LSL #1 ;	 R2的值左移3位，存入R0，R0=R2*8
		ANDS R1, R1, R2, LSL R3; R2的值左移R3位，然后和R1相与，结果放入R1

偏移寻址可采用的移位操作：

> LSL:逻辑左移，低端空位补0  
> LSR:逻辑右移，高端空位补0  
> ASR:算术右移，保持符号位不变（源操作数为正数，最高位为0，右移则补0，反之，反之。）  
> ROR:循环右移，低端移出位填入高端空出位  
> RRX:操作数右移一位，左侧空位由**CPSR（程序状态寄存器）**的C位填充  

#### 4、寄存器间接寻址

类似于C指针，地址操作：  

		LDR  R1, [R2]     ;	 R2中的数作为地址，取出此地址中的数据保存在R1中
		SWP  R1, R1, [R2] ;  R2中的数作为地址，取出此地址中的数据与R1的值交换

#### 5、基址寻址

基地址进行一定运算再进行下一步操作： 

		LDR  R2, [R3,#0x0F] ; R3中的数加0x0f作为地址，取出此地址中的数据保存在R2中
		STR  R1, [R2 #-2]   ; R2中的数减2作为地址，把R1的值保存在此地址位置

#### 6、多寄存器寻址

一次可以传送多个寄存器的值：  

		LDMIA  R1!, {R2-R7，R12} ; 将R1指向的地址的数据读出到R2-R7,R12，R1自动更新
		STMIA  R0!, {R3-R6，R10} ; 将R3-R6,R10中的数值保存到R0指向的地址，R0自动更新

#### 7、堆栈寻址

堆栈寻址使用专门寄存器（堆栈指针SP），指向一块存储区域——堆栈，堆栈可以分为两种：向高地址生长的称为**递增堆栈**，向低地址生长的称为**递减堆栈**。有以下四种情况：

> 1、满递增；堆栈通过增大存储器地址向上增长，SP指向有效数据的最高地址，指令 LDMFA,STMFA   
> 2、空递增：堆栈通过增大存储器地址向上增长，SP指向堆栈上第1个空位置，指令 LDMEA,STMEA   
> 3、满递减：堆栈通过减小存储器地址向下增长，SP指向有效数据的最低地址，指令 LDMFD,STMFD   
> 4、空递减：堆栈通过减小存储器地址向下增长，SP指向堆栈下第1个空位置，指令 LDMED,STMED   

		STMFD  SP!, {R1-R7，LR} ; 将R1-R7,LR向下入栈
		LDMFD  SP!, {R1-R7，LR} ; 数据出栈，放入R1-R7,LR寄存器

#### 8、块拷贝寻址

多寄存器传送指令，将一块数据从存储器的某一位置拷贝到另一位置：  

		STMIA R0!,{R1-R7}  ; 将R1-R7的数据保存到存储器中，存储器指针在保存第一个值之后增加，方向向上增长    
		STMIB R0!,{R1-R7}  ; 将R1-R7的数据保存到存储器中，存储器指针在保存第一个值之前增加，方向向上增长    
		STMDA R0!,{R1-R7}  ; 将R1-R7的数据保存到存储器中，存储器指针在保存第一个值之后增加，方向向下增长    
		STMDB R0!,{R1-R7}  ; 将R1-R7的数据保存到存储器中，存储器指针在保存第一个值之前增加，方向向下增长    

		不管是向上还是向下递增，存储时高编号的寄存器放在高地址的内存，出来时高地址的内容给高编号的寄存器。

#### 9、相对寻址

基寻址的一种变通，由程序计数器PC提供基准地址，地址码字作为偏移量，相加后得到的地址即为操作数的有效地址。

		BL  ROUTE1 ;  调用到 ROUTE1 子程序
		BEQ LOOP   ;  条件跳转到LOOP标号处


### 指令集介绍

#### 1、指令格式

**指令格式**：< opcode > {< cond >}{S}<Rd>,<Rn>,{< operand2 >}  
> 注：<>内是必填项，{}内是选填  

>  opcode ：指令助记符，如 LDR，STR   
>    cond ：执行条件，如 EQ，NE   
>       S ：是否影响CPSR的值，书写时影响CPSR，否则不影响    
>      Rd ：目标寄存器   
>      Rn ：第一个操作数的寄存器   
>operand2 ：第二个操作数

指令举例：

		LDR        R0, [R1] ;  读取R1地址上的存储器单元内容，执行条件AL（无条件）
		BEQ        DATAEVEN ;  跳转指令，执行条件EQ，即相等跳转到 DATAEVEN
		ADDS     R1, R1, #1 ;  加法指令，R1+1 => R1，影响CPSR寄存器（带S）
		SUBNES R1, R1, #0xD ;  条件执行减法运算（NE），R1-0xD => R1，影响CPSR（带S）

#### 2、条件码表

|条件助记符|   标志  |           含义          |
|:--------:|:-------:|:-----------------------:|
|    EQ    |   Z=1   |           相等          |
|    NE    |   Z=0   |          不相等         |
|   CS/HS  |   C=1   |    无符号数大于或等于   |
|   CC/LO  |   C=0   |       无符号数小于      |
|    MI    |   N=1   |           负数          |
|    PL    |   N=0   |           正数          |
|    VS    |   V=1   |           溢出          |
|    VC    |   V=0   |          无溢出         |
|    HI    | C=1,Z=0 |       无符号数大于      |
|    LS    | C=0,Z=1 |    无符号数小于或等于   |
|    GE    |   N=V   |    带符号数大于或等于   |
|    LT    |   N!=V  |       带符号数小于      |
|    GT    | Z=0,N=V |       带符号数大于      |
|    LE    | Z=1,N!=V|    带符号数小于或等于   |
|    AL    |         |任何无条件执行（default）|

条件码应用举例：  

1、比较两个值大小

		if(a>b)	a++;
		else b++;
		    | 
		    V
		//设R0为a，R1为b
		  CMP R0，R1     ; R0与R1比较 
		ADDHI R0，R0，#1 ; R0>R1，则R0=R0+1 
		ADDLS R1，R1，#1 ; R0<R1，则R1=R1+1    

2、若两个条件均成立则将两个数值相加

		if((a!=10)&&(b!=20)) a=a+b;
				|
				V
		  CMP R0，#10    ; 比较R0是否为10 
		CMPNE R1，#20    ; 若R0不为10，则比较R1是否为20 
		ADDNE R0，R0, R1 ; 若R0不为10且R1不为20，则执行R0 = R0+R1 

3、若两个条件有一个成立，则将两个数值相加

		if((a!=10)||(b!=20)) a=a+b;
				|
				V
		  CMP R0，#10    ; 比较R0是否为10 
		CMPEQ R1，#20    ; 若R0等于10，则比较R1是否为20 
		ADDNE R0，R0, R1 ; 若R0不为10或R1不为20，则执行R0 = R0+R1 


#### 3、ARM存储访问指令

**LDR、STR、LDM、STM、SWP**

**(1) LDR\STR**：加载\存储字和无符号字节指令  
有以下4种形式：  
1、零偏移：      LDR Rd, [Rn]  
2、前索引偏移：  LDR Rd, [Rn, #0x04]!, Rn不允许为R15    
3、程序相对偏移：LDR Rd, label  
4、后索引偏移：  LDR Rd, [Rn], #0x04, Rn不允许为R15  

指令举例：  

		LDR  R2,  [R5]        ;  加载R5指定地址的数据放入R2
		STR  R1,  [R0，#0x04] ;  将R1的数据存储到 R0+0x04 存储单元，R0保持不变（若有！，则R0需要更新）
		LDRB R3,  [R2], #1    ;  读取R2地址上1字节数据保存到R3，R2=R2+1
		STRH R1,  [R0, #2]!   ;  将R1数据保存到 R0+2 地址，只存储低2字节数据，R0=R0+2

**(2) LDM\STM**：批量加载\存储指令，LDM加载多个寄存器，STM存储多个寄存器，主用于现场保护、数据复制、参数传递等。  
有8种模式，前四种用于数据块传输，后4种用于堆栈操作。  
IA：每次传送后地址加4  
IB：每次传送前地址加4  
DA：每次传送后地址减4  
DB：每次传送前地址减4  
FD：满递减堆栈  
ED：空递减堆栈  
FA：满递增堆栈  
EA：空递增堆栈  

指令举例：  

		// 批量加载/存储
		LDMIA R0!, {R3-R9}     ;  加载R0指向的地址上的多字数据，保存到R3-R9中，R0更新
		STMIA R1!, {R3-R9}     ;  将R3-R9数据保存到R1指向的地址上，R1更新
		STMFD SP!, {R0-R7，LR} ;  现场保存，将R0-R7、LR入栈
		LDMFD SP!, {r0-r7, PC} ;  恢复现场，异常返回处理

		//使用LDM/STM进行数据复制
		LDR R0, = SrcData    ;  设置源数据地址，LDR此时作为伪指令加载地址，要加 = 
		LDR R1, = DstData    ;  设置目标地址
		LDMIA R0, {R2-R9}    ;  加载8字节数据到寄存器R2-R9
		LDMIA R1, {R2-R9}    ;  存储寄存器R2-R9到目标地址上

		//使用LDM/STM进行现场保护，常用在子程序或异常处理中
		STMFD SP!,{R0-R7,LR} ;  寄存器入栈
			.....
		BL DELAY             ;  调用DELAY子程序
			.....
		LDMFD SP!,{R0-R7,PC} ;  恢复寄存器，并返回

**(3) SWP**：寄存器和存储器交换指令，可使用SWP实现信号量操作
		
		12C_SEM EQU 0x40003000   ;EQU定义一个常量
		12C_SEM_WAIT             ;标签
		MOV R1,#0
		LDR R0,=12C_SEM          
		SWP R1,R1,[R0]           ;取出信号量，并设置为0
		CMP R1,#0                ;判断是否有信号
		BEQ 12C_SEM_WAIT         ;若没有信号，则等待

#### 4、ARM数据处理指令

**数据传送指令、算术逻辑运算指令、比较指令、乘法指令**

**(1) ADC指令**：带进位加法指令，将操作数2的数据与Rn的值相加，再加上CPSR中C条件标志位，结果保存到Rd中
使用ADC指令实现64位加法

		ADDS R0,R0,R2   ;  R0+R2 => R0，影响CPSR中的值
		ADC  R1,R1,R3   ;  (R1、R0) = (R1、R0)+(R3、R2)

**(2) SBC指令**：带借位减法指令，用寄存器Rn减去操作数2，再减去CPSR中的C条件标志位的非（即若C标志清零，则结果减去1），结果保存在Rd中
使用SBC实现64位减法

		SUBS R0,R0,R2
		SBC  R1,R1,R3  ;使用SBC实现64位减法，(R1,R0) - (R3,R2)

**(3) AND指令**：按位与操作

		ANDS R0,R0,#0x01  ;取出最低位数据

**(4) ORR指令**：按位或操作
		
		ORR R0,R0,#0x0F   ;将R0的低4位置1

**(5) EOR指令**：异或操作

**(6) BIC指令**：位清除指令（遇1清0）

**(7) TST指令**：位测试指令
		
		TST R0,#0x01     ; 判断R0的最低位是否是为0

**(8) TEQ指令**：相等测试指令

		TEQ R0,R1     ; 比较R0与R1是否相等，也可看作相减，相等则为0,Z=1

**(9) MUL指令**：乘法指令

		MUL R1,R2,R3   ; R1=R2*R3
		MULS R0,R3,R7  ; R0=R3*R7,同时设置CPSR中的N位和Z位

**(10) MLA**：乘加指令，将操作数1和操作数2相乘再加上第3个操作数，结果的低32位存入到Rd中
UMULL是64位无符号乘法指令
		
		UMULL R0,R1,R5,R8   ; (R1、R0) = R5 * R8

**(11) BL指令**：带链接的跳转指令，指令将下一条指令拷贝到R14（即LR）链接寄存器中，然后跳转到指定地址运行
BL指令用于子程序调用

		BL DELAY

**(12) BX指令**：带状态切换的跳转指令

		BX R0 ; 跳转到R0指定的地址，并根据R0的最低位来切换处理器的状态

**(13) MCR/MRC指令**：  
MCR：ARM寄存器到协处理器寄存器的数据传送指令  
MRC：协处理器寄存器到ARM寄存器的数据传送指令  

MRC/MCR指令格式如下：

MRC/MCR {cond} coproc,opcode1,Rd,CRn,CRm{,opcode2}

>coproc是指令操作的协处理器名，标准名为pn，n为0-15  
>opcode1 协处理器的特定操作码  
>Rd  MRC操作时，作为目标寄存器的协处理器寄存器，MCR操作时，作为ARM处理器的寄存器  
>CRn 存放第1个操作数的协处理器寄存器  
>CRm 存放第2个操作数的协处理器寄存器  
>opcode2 可选的协处理器特定操作码  

MRC/MCR指令举例如下：

		mcr/mrc p15,0,r0,c1,c0,0

**(14) SWI指令**：SWI指令用于产生中断，从而实现用户模式变换到管理模式，CPSR保存到管理模式的SPSR中，执行转移到SWI向量

		SWI 0x123456  ;软中断，中断立即数 0x123456

在SWI异常中断处理程序中，取出SWI立即数的步骤为：首先确定引起软中断的SWI指令是ARM指令还是THUMB指令，这可通过对SPSR访问得到，然后要取得该SWI指令的地址，这可通过访问LR寄存器得到，接着读出指令，分解出立即数  
程序代码如下：

		T_bit EQU 0x20                    ;0010 0000
		SWI_Hander
			    STMFD SP!,{R0-R3,R12,LR}  ;现场保护
			    MRS R0,SPSR               ;读取SPSR
			    STMFD SP!,{R0}            ;保存SPSR
			    TST R0, #T_bit            ;测试T标志位，0为ARM，1为THUMB
			    LDRNEH  R0,[LR,#-2]       ;若是THUMB指令，读出产生中断的指令码(16位)
			    BICNE R0,R0,#0xFF00       ;取得THUMB指令的8位立即数
			    LDREQ R0,[LR,#-4]         ;若是ARM指令，读取产生中断的指令码(32位)
			    BICEQ R0,R0,#0xFF000000   ;取得ARM指令的24位立即数
			    BL  C_SWI_Handler
			    LDMFD SP!,{R0-R3,R12,PC}^ ;SWI异常中断返回

**(15) MRS指令**：读状态寄存器指令，在ARM处理器中，只有MRS指令可以从状态寄存器CPSR或SPSR读出到通用寄存器  
MRS R1,CPSR     ;将CPSR状态寄存器读取，保存到R1
MRS R2,SPSR     ;将SPSR状态寄存器读取，保存到R2

MRS应用：  
1、使能IRQ中断  

		ENABLE_IRQ
		MRS R0,CPSR
		BIC R0,R0,#0x80       ;1000 0000
		MSR CPSR,R0
		MOV PC,LR

2、禁止IRQ中断

		DISABLE_IRQ
		MRS R0,CPSR
		ORR R0,R0,#0x80
		MSR CPSR,R0
		MOV PC,LR

MSR：写状态寄存器指令，在ARM处理器中，只有MSR指令可以直接设置状态寄存器CPSR或SPSR

### ARM伪指令介绍

ARM伪指令不是ARM指令集中的指令，只是为了编程方便编译器定义了伪指令 

#### 1、ARM地址读取伪指令

ARM地址读取伪指令有四条，分别是  
ADR    伪指令  
ADRL   伪指令  
LDR    伪指令  
NOP    伪指令  

作用的范围不一样，由小到大： ADR < ADRL < LDR

**ADR、ADRL指令**将基于PC相对偏移的地址读取到存储器中，例如

		ADR  R0 , DISP_TAB    ; 加载转换表地址
		LDR  R1 , [R0,R2]     ;使用R2作为参数，进行查表
			.....
		DISP_TAB
		DCB
    		0xc0,0xf9,0xa4,0x99,0x92,0x82,0xf8,0x80

**LDR伪指令**用于加载32位的立即数或一个地址值到指定寄存器，需要前加 =

		LDR R0,=0x123456     ;加载32位立即数0x123456
		LDR R0,=DATA_BUF+60  ;加载DATA_BUF地址+60

**NOP**是空操作伪指令

#### 2、符号定义伪指令

符号定义伪指令：  
1、全局变量声明：GBLA、GBLL 和 GBLS  
2、局部变量声明：LCLA、LCLL 和 LCLS  
3、变量赋值：SETA、SETL、和 SETS  
4、为一个通用寄存器列表定义名称：RLIST  
5、为一个协处理器的寄存器定义名称：CN  
6、为一个协处理器定义名称：CP  

>以上指令中，最后一个字符 A代表算术变量，初始值为0，L代表逻辑变量，初值为FALSE，S代表字符串，初值为空

伪指令应用：

		MACRO               ;声明一个宏
		SENDDAT $dat        ;宏的原型 $表示后面是变量
		LCLA bitno          ;声明一个局部算术变量
		...
		bitno SETA 8        ;设置变量值为8
		...
		MEND                ;结束

**RLIST指令用法**：

name RLIST {reglist}
		
		LoReg RLIST {R0-R7}   ;定义寄存器列表LoReg

**CN指令用法**：

name CN expr  
>其中name是要定义的协处理器的寄存器名称，expr对应的协处理器的寄存器编号，数值范围 0 ~ 15
MemSet CN 1  ;将协处理器的寄存器1名称定义为 MemSet

CP指令的用法，举例如下：
DivRun CP 5  ;将协处理器5名称定义为DivRun




—— Root 于 2016.11


