---
layout:     post
title:      "彻底搞懂C语言指针和数组"
subtitle:   " \"char *,char **,char a[ ],char *a[ ]\""
date:       2016-08-24 15:56:00
author:     "Root"
header-img: "img/post-bg-rwd.jpg"
catalog: true
tags:
    - C语言
---

> “是时候展现真正的技术了！ -EZ大师。 ”


## 指针和数组

### 指针

指针也是一种变量，保存的是一个标识其他位置的地址。由于地址也是整数，在３２位平台下，指针默认为３２位。

### 数组

char  str[10]

C语言中没有真正的字符串类型，可以通过字符数组表示字符串，因为它的元素地址是连续的。

C语言中规定数组代表数组所在内存位置的首地址，也是 str[0]的地址，即str = &str[0];

**C语言中字符串常量的本质表示其实是一个地址！**C语言中编译器会给字符串常量分配地址，例如 "China", 存储在内存中的 0x3000 0x3001 0x3002 0x3003 0x3004 0x3005 .字符串常量的本质是代表他的第一个字符的地址。

For Example:

`    #include <studio.h>
    int main()
    {
	    char *s;   
	    s = "hello"   
	    printf("%p\n",s);   
	    return 0;   
    }`

打印出来之后，s=0x00422020。这是“hello”的首地址。

故：**C语言中操作字符串是通过它在内存中的存储单元的首地址进行的，这是字符串的终极本质**

## char *与 char a[]

### char  *s;  char  a[ ] 

a代表字符串的首地址，而s 这个指针也保存字符串的地址,即第一个字符的地址

因此可以 s = a;**但是不能 a = s;**

**C语言中数组名可以复制给指针表示地址， 但是却不能赋给给数组名，它是一个常量类型，所以不能修改**

### char * 与 char a[ ] 的本质区别：

当定义 char a[10 ]  时，编译器会给数组分配十个单元，每个单元的数据类型为字符。而定义 char *s 时，  这是个指针变量，只占四个字节，32位，用来保存一个地址。一句话来概括，就是 char *s 只是一个保存字符串首地址的指针变量， char a[ ] 是许多连续的内存单元，单元中的元素为char。

## char **  与char  * a[ ]

### 先看 char  *a [ ] ;

由于[ ] 的优先级高于* 所以a先和 [ ]结合，他还是一个数组，数组中的元素是 （char *）类型。又因为（char *）类型可以指向字符串，故：

char *a[ ] = {"China","French","America","German"}；

但是！这时sizeof(a)*是16而不是28*！而且此时a[ ]中储存的四个地址并不是连续的，它们分别指向编译器为四个字符串分配的空间地址，因此互相无关联。

### char **s

char **为二级指针， s保存一级指针 char *的地址(指针的地址)

`    char *a[] = {"china","genman","england","america"};   
     char **s = a;   
`
这里a=&a[0]; 是个地址，将这个地址赋给 *s ,再来个**s指向该地址的地址，完美！  

`    char **s = "hello"      
`
这就是错误的，因为s 的类型是 char **  而 "hello world "的类型是 char *   

## PS

绕啊绕，绕到外婆桥~~


—— Root 于 2016.8


