---
layout:     post
title:      "位域结构体相关"
subtitle:   " \" 嵌入式C语言相关技巧之位域结构体 \""
date:       2016-12-03 09:57:00
author:     "Root"
header-img: "img/Jilin.jpg"
catalog: true
tags:
    - C语言
---

> “我不顾一切的冲出去，为你开辟一条安稳的路。我满腔热血的拍打着，为你抛开任何绊脚的石。最后，我坦然微笑着用身躯为你抵挡一切伤害。因为我的身体上旋转着我们的誓言。 ————牛头酋长 ”

嵌入式开发中经常需要操作某一寄存器的某个特殊位，时间长了之后就会显得很乱，使用位域结构体的方式就比较清晰，代码结构较好，在此整理一下（以DSP C281x为例）。

		//*****************************************************************************    
		//DSP281x_headers\include\DSP281x_CpuTimers.h CPU 定时器头文件    
		//*****************************************************************************    
		struct TCR_BITS   //定义一个TCR_BITS 结构体类型（不是变量）    
		{ 
			Uint16 rsvd1:4;   //3:0 保留，从最低位开始，顺序取位到最高位。取低4 位    
			Uint16 TSS:1;     //4 定时器开始/停止，取第5 位    
			Uint16 TRB:1;     //5 定时器重装，取第6 位    
			Uint16 rsvd2:4;   //9:6 保留，取第7 位到第10 位    
			Uint16 SOFT:1;    //10 仿真模式，取第11 位    
			Uint16 FREE:1;    //11 仿真模式，取第12 位    
			Uint16 rsvd3:2;   //12:13 保留，取第13 位到第14 位    
			Uint16 TIE:1;     //14 输出使能，取第15 位    
			Uint16 TIF:1;     //15 中断标志，取第16 位    
		}; 

然后，通过共用体进行声明，以便访问位域结构体定义的各个成员或者16位或32位寄存器的值。例如，定时器的控制寄存器共用体如下所示：

		//定义共用体类型TCR_REG（不是变量） 
		union TCR_REG    
		{ 
			Uint16 all;    
			struct TCR_BITS bit; //bit 是一个具有TCR_BITS 结构体类型的变量    
		};    
		//all 和bit 是共用体的两个成员，它们都是16 位结构，占用内存的同一单元  

一旦每个寄存器的位域结构体类型和共用体的定义都建立起来了，则在CPU定时器（CPU-Timer）的寄存器结构体类型中，各个成员可通过采用共用体定义的形式重写：

		struct CPUTIMER_REGS    
		{
			union TIM_GROUP TIM;  //定时器计数寄存器，TIM是一个具有TIM_GROUP共用体类型的变量    
			union PRD_GROUP PRD;  //定时器周期寄存器    
			union TCR_REG   TCR;  //定时器控制寄存器    
			Uint16 rsvd1;         //保留    
			union TPR_REG   TPR;  //定时器预定标寄存器低位    
			union TPRH_REG  TPRH; //定时器预定标寄存器高位    
		}; 

现在，既可以通过C 代码以位域的方法访问CpuTimer 寄存器中的某位，也可以对整个寄存器进行访问：

		CpuTimer0Regs.TCR.bit.TSS = 1; //访问一个单独的位域的示例    
		CpuTimer0Regs.TCR.all = TSS_MASK; //访问整个寄存器的示例 

以上。


—— Root 于 2016.12


